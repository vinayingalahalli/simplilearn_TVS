<?xml version = "1.0" encoding = "utf-8"?>
<!DOCTYPE hibernate-configuration SYSTEM 
"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
	<session-factory>

		<property name="hibernate.dialect">
			org.hibernate.dialect.MySQLDialect
		</property>

		<property name="hibernate.connection.driver_class">
			com.mysql.cj.jdbc.Driver
		</property>

		<property name="hibernate.connection.url">
			jdbc:mysql://localhost:3306/tvs
		</property>

		<property name="hibernate.connection.username">
			root
		</property>

		<property name="hibernate.connection.password">
			root
		</property>

		<!-- show_sql is used to print the queries generated by hibernate on the 
			console -->
		<property name="show_sql">
			true
		</property>
		<!--format_sql is to print the sql queries in a neat formatted/aligned/readable 
			way -->
		<property name="format_sql">
			true
		</property>

		<!--hbm2ddl-hibernate mapping to data defination language where it provides 
			3 modes 1)create- this mode will create the tables when SessionFactory is 
			starting up and if you restart it will drop the tables and it will create 
			it again. 2)create-drop - this mode will drop and create everytime the sessionfactory 
			is opened and closed. 3)update - this mode will not create or drop any tables, 
			it is presumed that the tables are already existing and hibernate will do 
			its CRUD ops on that. -->
		<property name="hbm2ddl.auto">
			update
		</property>

		<!-- List of XML mapping files if you are using xml configuration for your 
			POJO classes -->
		<!-- <mapping resource="Employee.hbm.xml" /> -->

		<!-- Use this below way of specifying your POJO class if you prefer doing 
			Annotation configuration -->
		<!-- <mapping class="com.model.Pojo"/> -->
		<mapping class="com.demo.model.Player" />
		<!-- <mapping class="com.demo.model.Trainee" /> -->
	</session-factory>
</hibernate-configuration>